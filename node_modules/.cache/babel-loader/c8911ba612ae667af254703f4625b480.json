{"ast":null,"code":"var _jsxFileName = \"/Users/hasancan/Desktop/examples/theme-example/src/theme/ThemeProvider.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useMemo, useState } from \"react\";\nimport { colors } from \"./colors\";\nimport { ThemeProvider as StyledThemeProvider } from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport let ThemeType;\n\n(function (ThemeType) {\n  ThemeType[\"Light\"] = \"light\";\n  ThemeType[\"Dark\"] = \"dark\";\n})(ThemeType || (ThemeType = {}));\n\nexport const ThemeContext = /*#__PURE__*/createContext({\n  theme: {\n    colors: colors.light,\n    selectedTheme: ThemeType.Light\n  }\n});\nexport const ThemeProvider = _ref => {\n  _s();\n\n  let {\n    children,\n    defaultTheme\n  } = _ref;\n  const [selectedTheme, setSelectedTheme] = useState(defaultTheme || ThemeType.Light);\n\n  const handleChangeTheme = theme => {\n    setSelectedTheme(state => {\n      if (theme) {\n        return theme;\n      }\n\n      if (state === ThemeType.Dark) {\n        return ThemeType.Light;\n      } else {\n        return ThemeType.Dark;\n      }\n    });\n  };\n\n  const theme = useMemo(() => ({\n    colors: colors[selectedTheme],\n    selectedTheme\n  }), [selectedTheme]);\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      handleChangeTheme\n    },\n    children: /*#__PURE__*/_jsxDEV(StyledThemeProvider, {\n      theme: theme,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ThemeProvider, \"2TBge1Lihynv5d57utTksoEDhnE=\");\n\n_c = ThemeProvider;\nexport default ThemeProvider;\nexport function useTheme() {\n  _s2();\n\n  const {\n    theme,\n    handleChangeTheme: changeTheme\n  } = useContext(ThemeContext);\n  return {\n    theme,\n    changeTheme\n  };\n}\n\n_s2(useTheme, \"Xt8gwZo0yHVfv97jXtHAY3oLbyo=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["createContext","useContext","useMemo","useState","colors","ThemeProvider","StyledThemeProvider","ThemeType","ThemeContext","theme","light","selectedTheme","Light","children","defaultTheme","setSelectedTheme","handleChangeTheme","state","Dark","useTheme","changeTheme"],"sources":["/Users/hasancan/Desktop/examples/theme-example/src/theme/ThemeProvider.tsx"],"sourcesContent":["import { createContext, useContext, useMemo, useState } from \"react\";\nimport { colors } from \"./colors\";\nimport { ThemeProvider as StyledThemeProvider } from \"styled-components\";\n\nexport enum ThemeType {\n  Light = \"light\",\n  Dark = \"dark\",\n}\n\nexport const ThemeContext = createContext<AppTheme>({\n  theme: {\n    colors: colors.light as Palette,\n    selectedTheme: ThemeType.Light,\n  },\n});\n\ninterface IThemeProvidersProps {\n  children: JSX.Element[] | JSX.Element;\n  defaultTheme?: ThemeType;\n}\n\nexport const ThemeProvider = ({\n  children,\n  defaultTheme,\n}: IThemeProvidersProps) => {\n  const [selectedTheme, setSelectedTheme] = useState<ThemeType>(\n    defaultTheme || ThemeType.Light\n  );\n\n  const handleChangeTheme = (theme?: ThemeType) => {\n    setSelectedTheme((state?: ThemeType) => {\n      if (theme) {\n        return theme;\n      }\n      if (state === ThemeType.Dark) {\n        return ThemeType.Light;\n      } else {\n        return ThemeType.Dark;\n      }\n    });\n  };\n\n  const theme = useMemo(\n    () => ({\n      colors: colors[selectedTheme] as Palette,\n      selectedTheme,\n    }),\n    [selectedTheme]\n  );\n\n  return (\n    <ThemeContext.Provider value={{ theme, handleChangeTheme }}>\n      <StyledThemeProvider theme={theme}>{children}</StyledThemeProvider>\n    </ThemeContext.Provider>\n  );\n};\n\nexport default ThemeProvider;\n\nexport function useTheme() {\n  const { theme, handleChangeTheme: changeTheme } = useContext(ThemeContext);\n\n  return { theme, changeTheme };\n}\n"],"mappings":";;;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,OAApC,EAA6CC,QAA7C,QAA6D,OAA7D;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,aAAa,IAAIC,mBAA1B,QAAqD,mBAArD;;AAEA,WAAYC,SAAZ;;WAAYA,S;EAAAA,S;EAAAA,S;GAAAA,S,KAAAA,S;;AAKZ,OAAO,MAAMC,YAAY,gBAAGR,aAAa,CAAW;EAClDS,KAAK,EAAE;IACLL,MAAM,EAAEA,MAAM,CAACM,KADV;IAELC,aAAa,EAAEJ,SAAS,CAACK;EAFpB;AAD2C,CAAX,CAAlC;AAYP,OAAO,MAAMP,aAAa,GAAG,QAGD;EAAA;;EAAA,IAHE;IAC5BQ,QAD4B;IAE5BC;EAF4B,CAGF;EAC1B,MAAM,CAACH,aAAD,EAAgBI,gBAAhB,IAAoCZ,QAAQ,CAChDW,YAAY,IAAIP,SAAS,CAACK,KADsB,CAAlD;;EAIA,MAAMI,iBAAiB,GAAIP,KAAD,IAAuB;IAC/CM,gBAAgB,CAAEE,KAAD,IAAuB;MACtC,IAAIR,KAAJ,EAAW;QACT,OAAOA,KAAP;MACD;;MACD,IAAIQ,KAAK,KAAKV,SAAS,CAACW,IAAxB,EAA8B;QAC5B,OAAOX,SAAS,CAACK,KAAjB;MACD,CAFD,MAEO;QACL,OAAOL,SAAS,CAACW,IAAjB;MACD;IACF,CATe,CAAhB;EAUD,CAXD;;EAaA,MAAMT,KAAK,GAAGP,OAAO,CACnB,OAAO;IACLE,MAAM,EAAEA,MAAM,CAACO,aAAD,CADT;IAELA;EAFK,CAAP,CADmB,EAKnB,CAACA,aAAD,CALmB,CAArB;EAQA,oBACE,QAAC,YAAD,CAAc,QAAd;IAAuB,KAAK,EAAE;MAAEF,KAAF;MAASO;IAAT,CAA9B;IAAA,uBACE,QAAC,mBAAD;MAAqB,KAAK,EAAEP,KAA5B;MAAA,UAAoCI;IAApC;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CAlCM;;GAAMR,a;;KAAAA,a;AAoCb,eAAeA,aAAf;AAEA,OAAO,SAASc,QAAT,GAAoB;EAAA;;EACzB,MAAM;IAAEV,KAAF;IAASO,iBAAiB,EAAEI;EAA5B,IAA4CnB,UAAU,CAACO,YAAD,CAA5D;EAEA,OAAO;IAAEC,KAAF;IAASW;EAAT,CAAP;AACD;;IAJeD,Q"},"metadata":{},"sourceType":"module"}